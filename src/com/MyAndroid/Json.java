package com.MyAndroid;/** * <b>JSON解析类</b><br/> * By：MoonLord 2015.8.8<br/> * <p> * 解析JSON字符串，可以和常见的JAVA数据结构进行轻松的转换<br/> * </p> */public final class Json {	/**	 * 保存的org.json.JSONObject对象（默认为null）<br/>	 * <b>注意：</b><br/>	 * 不建议直接操作InnerObject（避免出现空指针等异常）<br/>	 * 	 * @see org.json.JSONObject	 */	public org.json.JSONObject InnerObject;	/**	 * 保存的org.json.JSONArray数组（默认为null）<br/>	 * <b>注意：</b><br/>	 * 不建议直接操作InnerArray（避免出现空指针等异常）<br/>	 * 	 * @see org.json.JSONArray	 */	public org.json.JSONArray InnerArray;	/**	 * 保存的元素的个数（默认为0）<br/>	 * <b>注意：</b><br/>	 * 当JSON的格式为键值对，比如{"ABC":"123"}时，Length的值为键值对的个数（1），即InnerObject.length()<br/>	 * 当JSON的格式为数组，比如["123","456"]时，Length的值为元素的个数（2），即InnerArray.length()<br/>	 * 	 * @see #InnerObject	 * @see #InnerArray	 */	public int Length;	/**	 * 创建JSON对象，默认构造方法（不做任何操作）<br/>	 * 简单示例：<br/>	 * Json A = new Json();<br/>	 * Json B = new Json( "[ 123 , 456 , 789 ]" );<br/>	 * Json C = new Json( new java.lang.String[]{ "123" , "456", "789" } );<br/>	 * Json D = new Json( C.JsonString() );<br/>	 * Json E = new Json( D );<br/>	 * Json F = new Json(new Json[]{B , C , D});	 */	public Json() {}	/**	 * 创建JSON对象，通过解析一个JSON字符串<br/>	 * <b>注意：</b><br/>	 * JSON字符串的格式不正确时，InnerObject和InnerArray会仍为null值，可以通过Length的值来判断JSON是否含有元素<br/>	 * 	 * @param jsonString	 *            满足JSON格式的字符串	 */	public Json(java.lang.String jsonString) {		if (jsonString != null) {			try {				InnerObject = new org.json.JSONObject(jsonString);				Length = InnerObject.length();				return;			}			catch (org.json.JSONException e) {}			try {				InnerArray = new org.json.JSONArray(jsonString);				Length = InnerArray.length();				return;			}			catch (org.json.JSONException e) {}		}	}	/**	 * 创建JSON对象，通过复制一个已有的JSON对象<br/>	 * <b>注意：</b><br/>	 * 复制过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON的过程，两个JSON对象不会有任何引用的关联<br/>	 * 	 * @param JsonInstance	 *            要复制的JSON对象	 */	public Json(Json JsonInstance) {		java.lang.String jsonString = JsonInstance.JsonString();		try {			InnerObject = new org.json.JSONObject(jsonString);			Length = InnerObject.length();			return;		}		catch (org.json.JSONException e) {}		try {			InnerArray = new org.json.JSONArray(jsonString);			Length = InnerArray.length();			return;		}		catch (org.json.JSONException e) {}	}	/**	 * 创建JSON对象，通过复制一个已有的org.json.JSONObject对象<br/>	 * <b>注意：</b><br/>	 * 复制过程实际上是将org.json.JSONObject转换为java.lang.String和解析java.lang.String为JSON的过程，新创建的JSON和org.json.JSONObject不会有任何引用的关联<br/>	 * 	 * @param JsonInstance	 *            要复制的org.json.JSONObject对象	 */	public Json(org.json.JSONObject JsonInstance) {		java.lang.String jsonString = JsonInstance.toString();		try {			InnerObject = new org.json.JSONObject(jsonString);			Length = InnerObject.length();			return;		}		catch (org.json.JSONException e) {}	}	/**	 * 创建JSON对象，通过复制一个已有的org.json.JSONArray对象<br/>	 * <b>注意：</b><br/>	 * 复制过程实际上是将org.json.JSONArray转换为java.lang.String和解析java.lang.String为JSON的过程，新创建的JSON和org.json.JSONArray不会有任何引用的关联<br/>	 * 	 * @param JsonInstance	 *            要复制的org.json.JSONArray对象	 */	public Json(org.json.JSONArray JsonInstance) {		java.lang.String jsonString = JsonInstance.toString();		try {			InnerArray = new org.json.JSONArray(jsonString);			Length = InnerArray.length();			return;		}		catch (org.json.JSONException e) {}	}	/**	 * 创建JSON对象，然后将ObjectArray中的元素保存进去<br/>	 * <b>注意：</b><br/>	 * ObjectArray的Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * ObjectArray的Object的类型为JSON时，是将JSON转换为java.lang.String然后解析java.lang.String为JSON，不会有任何引用的关联<br/>	 * 如果Object的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能保存到JSON中<br/>	 * 	 * @param ObjectArray	 *            要保存的数组	 */	public Json(Object[] ObjectArray) {		InnerArray = new org.json.JSONArray();		Length = ObjectArray.length;		for (int i = 0; i < Length; i++) {			Object temp = ObjectArray[i];			try {				if (temp instanceof Json) {					if (((Json) temp).InnerObject != null) {						InnerArray.put(new org.json.JSONObject(((Json) temp).InnerObject.toString()));					}					else if (((Json) temp).InnerArray != null) {						InnerArray.put(new org.json.JSONArray(((Json) temp).InnerArray.toString()));					}					else {						InnerArray.put(new org.json.JSONObject("{}"));					}				}				else {					if (temp instanceof org.json.JSONObject) {						temp = new org.json.JSONObject(((org.json.JSONObject) temp).toString());					}					if (temp instanceof org.json.JSONArray) {						temp = new org.json.JSONArray(((org.json.JSONArray) temp).toString());					}					if (temp instanceof Double && (Double.isInfinite((Double) temp) || Double.isNaN((Double) temp))) {						continue;					}					InnerArray.put(temp);				}			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}	}	/**	 * 创建JSON对象，然后将ObjectList中的元素保存进去<br/>	 * <b>注意：</b><br/>	 * ObjectList的Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * ObjectList的Object的类型为JSON时，是将JSON转换为java.lang.String然后解析java.lang.String为JSON，不会有任何引用的关联<br/>	 * 如果Object的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能保存到JSON中<br/>	 * 	 * @param ObjectList	 *            要保存的数组（可兼容List、ArrayList、LinkedList、Vector、Stack等）	 */	public Json(java.util.List<Object> ObjectList) {		InnerArray = new org.json.JSONArray();		Length = ObjectList.size();		for (int i = 0; i < Length; i++) {			Object temp = ObjectList.get(i);			try {				if (temp instanceof Json) {					if (((Json) temp).InnerObject != null) {						InnerArray.put(new org.json.JSONObject(((Json) temp).InnerObject.toString()));					}					else if (((Json) temp).InnerArray != null) {						InnerArray.put(new org.json.JSONArray(((Json) temp).InnerArray.toString()));					}					else {						InnerArray.put(new org.json.JSONObject("{}"));					}				}				else {					if (temp instanceof org.json.JSONObject) {						temp = new org.json.JSONObject(((org.json.JSONObject) temp).toString());					}					if (temp instanceof org.json.JSONArray) {						temp = new org.json.JSONArray(((org.json.JSONArray) temp).toString());					}					if (temp instanceof Double && (Double.isInfinite((Double) temp) || Double.isNaN((Double) temp))) {						continue;					}					InnerArray.put(temp);				}			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}	}	/**	 * 创建JSON对象，然后将ObjectSet中的元素保存进去<br/>	 * <b>注意：</b><br/>	 * ObjectSet的Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * ObjectSet的Object的类型为JSON时，是将JSON转换为java.lang.String然后解析java.lang.String为JSON，不会有任何引用的关联<br/>	 * 如果Object的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能保存到JSON中<br/>	 * 	 * @param ObjectSet	 *            要保存的元素的集合（可兼容Set、HashSet、TreeSet、LinkedHashSet等）	 */	public Json(java.util.Set<Object> ObjectSet) {		InnerArray = new org.json.JSONArray();		Length = ObjectSet.size();		java.util.Iterator<Object> it = ObjectSet.iterator();		while (it.hasNext()) {			Object temp = it.next();			try {				if (temp instanceof Json) {					if (((Json) temp).InnerObject != null) {						InnerArray.put(new org.json.JSONObject(((Json) temp).InnerObject.toString()));					}					else if (((Json) temp).InnerArray != null) {						InnerArray.put(new org.json.JSONArray(((Json) temp).InnerArray.toString()));					}					else {						InnerArray.put(new org.json.JSONObject("{}"));					}				}				else {					if (temp instanceof org.json.JSONObject) {						temp = new org.json.JSONObject(((org.json.JSONObject) temp).toString());					}					if (temp instanceof org.json.JSONArray) {						temp = new org.json.JSONArray(((org.json.JSONArray) temp).toString());					}					if (temp instanceof Double && (Double.isInfinite((Double) temp) || Double.isNaN((Double) temp))) {						continue;					}					InnerArray.put(temp);				}			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}	}	/**	 * 创建JSON对象，然后将ObjectMap中的键值保存进去<br/>	 * <b>注意：</b><br/>	 * ObjectMap的Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * ObjectMap的Object的类型为JSON时，是将JSON转换为java.lang.String然后解析java.lang.String为JSON，不会有任何引用的关联<br/>	 * 如果Object的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能保存到JSON中<br/>	 * 	 * @param ObjectMap	 *            要保存的键值的集合（可兼容Map、HashTable、HashMap、LinkedHashMap、TreeMap、WeakHashMap等）	 */	public Json(java.util.Map<java.lang.String, Object> ObjectMap) {		InnerObject = new org.json.JSONObject();		for (java.util.Map.Entry<java.lang.String, Object> entry : ObjectMap.entrySet()) {			Object temp = entry.getValue();			try {				if (temp instanceof Json) {					if (((Json) temp).InnerObject != null) {						InnerObject.put(entry.getKey(), new org.json.JSONObject(((Json) temp).InnerObject.toString()));					}					else if (((Json) temp).InnerArray != null) {						InnerObject.put(entry.getKey(), new org.json.JSONArray(((Json) temp).InnerArray.toString()));					}					else {						InnerObject.put(entry.getKey(), new org.json.JSONObject("{}"));					}				}				else {					if (temp instanceof org.json.JSONObject) {						temp = new org.json.JSONObject(((org.json.JSONObject) temp).toString());					}					if (temp instanceof org.json.JSONArray) {						temp = new org.json.JSONArray(((org.json.JSONArray) temp).toString());					}					if (temp instanceof Double && (Double.isInfinite((Double) temp) || Double.isNaN((Double) temp))) {						continue;					}					InnerObject.put(entry.getKey(), temp);				}			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		Length = InnerObject.length();	}	/**	 * 创建JSON对象，然后将ObjectBundle中的键值保存进去<br/>	 * <b>注意：</b><br/>	 * ObjectBundle的Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * ObjectBundle的Object的类型为JSON时，是将JSON转换为java.lang.String然后解析java.lang.String为JSON，不会有任何引用的关联<br/>	 * 如果Object的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能保存到JSON中<br/>	 * 	 * @param ObjectBundle	 *            要保存的键值的集合（android.os.Bundle）	 */	public Json(android.os.Bundle ObjectBundle) {		InnerObject = new org.json.JSONObject();		for (java.lang.String entry : ObjectBundle.keySet()) {			Object temp = ObjectBundle.get(entry);			try {				if (temp instanceof Json) {					if (((Json) temp).InnerObject != null) {						InnerObject.put(entry, new org.json.JSONObject(((Json) temp).InnerObject.toString()));					}					else if (((Json) temp).InnerArray != null) {						InnerObject.put(entry, new org.json.JSONArray(((Json) temp).InnerArray.toString()));					}					else {						InnerObject.put(entry, new org.json.JSONObject("{}"));					}				}				else {					if (temp instanceof org.json.JSONObject) {						temp = new org.json.JSONObject(((org.json.JSONObject) temp).toString());					}					if (temp instanceof org.json.JSONArray) {						temp = new org.json.JSONArray(((org.json.JSONArray) temp).toString());					}					if (temp instanceof Double && (Double.isInfinite((Double) temp) || Double.isNaN((Double) temp))) {						continue;					}					InnerObject.put(entry, temp);				}			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		Length = InnerObject.length();	}	/**	 * 创建JSON对象，然后将KeyArray和ValueArray对应的键值保存进去<br/>	 * <b>注意：</b><br/>	 * ValueArray的Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * ValueArray的Object的类型为JSON时，是将JSON转换为java.lang.String然后解析java.lang.String为JSON，不会有任何引用的关联<br/>	 * 如果Object的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能保存到JSON中<br/>	 * 实际保存的键值数目，不会超过KeyArray和ValueArray的元素个数的较小值<br/>	 * 	 * @param KeyArray	 *            要保存的键的字符串数组	 * @param ValueArray	 *            要保存的值的数组	 */	public Json(java.lang.String[] KeyArray, Object[] ValueArray) {		InnerObject = new org.json.JSONObject();		Length = java.lang.Math.min(KeyArray.length, ValueArray.length);		for (int i = 0; i < Length; i++) {			Object temp = ValueArray[i];			try {				if (temp instanceof Json) {					if (((Json) temp).InnerObject != null) {						InnerObject.put(KeyArray[i], new org.json.JSONObject(((Json) temp).InnerObject.toString()));					}					else if (((Json) temp).InnerArray != null) {						InnerObject.put(KeyArray[i], new org.json.JSONArray(((Json) temp).InnerArray.toString()));					}					else {						InnerObject.put(KeyArray[i], new org.json.JSONObject("{}"));					}				}				else {					if (temp instanceof org.json.JSONObject) {						temp = new org.json.JSONObject(((org.json.JSONObject) temp).toString());					}					if (temp instanceof org.json.JSONArray) {						temp = new org.json.JSONArray(((org.json.JSONArray) temp).toString());					}					if (temp instanceof Double && (Double.isInfinite((Double) temp) || Double.isNaN((Double) temp))) {						continue;					}					InnerObject.put(KeyArray[i], temp);				}			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		Length = InnerObject.length();	}	/**	 * 创建JSON对象，然后将KeyList和ValueList对应的键值保存进去<br/>	 * <b>注意：</b><br/>	 * ValueList的Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * ValueList的Object的类型为JSON时，是将JSON转换为java.lang.String然后解析java.lang.String为JSON，不会有任何引用的关联<br/>	 * 如果Object的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能保存到JSON中<br/>	 * 实际保存的键值数目，不会超过KeyList和ValueList的元素个数的较小值<br/>	 * 	 * @param KeyList	 *            要保存的键的字符串数组（可兼容List、ArrayList、LinkedList、Vector、Stack等）	 * @param ValueList	 *            要保存的值的数组（可兼容List、ArrayList、LinkedList、Vector、Stack等）	 */	public Json(java.util.List<java.lang.String> KeyList, java.util.List<Object> ValueList) {		InnerObject = new org.json.JSONObject();		Length = java.lang.Math.min(KeyList.size(), ValueList.size());		for (int i = 0; i < Length; i++) {			Object temp = ValueList.get(i);			try {				if (temp instanceof Json) {					if (((Json) temp).InnerObject != null) {						InnerObject.put(KeyList.get(i), new org.json.JSONObject(((Json) temp).InnerObject.toString()));					}					else if (((Json) temp).InnerArray != null) {						InnerObject.put(KeyList.get(i), new org.json.JSONArray(((Json) temp).InnerArray.toString()));					}					else {						InnerObject.put(KeyList.get(i), new org.json.JSONObject("{}"));					}				}				else {					if (temp instanceof org.json.JSONObject) {						temp = new org.json.JSONObject(((org.json.JSONObject) temp).toString());					}					if (temp instanceof org.json.JSONArray) {						temp = new org.json.JSONArray(((org.json.JSONArray) temp).toString());					}					if (temp instanceof Double && (Double.isInfinite((Double) temp) || Double.isNaN((Double) temp))) {						continue;					}					InnerObject.put(KeyList.get(i), temp);				}			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		Length = InnerObject.length();	}	/**	 * 创建JSON对象，然后将KeySet和ValueSet对应的键值保存进去<br/>	 * <b>注意：</b><br/>	 * ValueSet的Object的类型必须为JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * ValueSet的Object的类型为JSON时，是将JSON转换为java.lang.String然后解析java.lang.String为JSON，不会有任何引用的关联<br/>	 * 如果Object的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能保存到JSON中<br/>	 * 实际保存的键值数目，不会超过KeySet和ValueSet的元素个数的较小值<br/>	 * 	 * @param KeySet	 *            要保存的键的字符串集合（可兼容Set、HashSet、TreeSet、LinkedHashSet等）	 * @param ValueSet	 *            要保存的值的集合（可兼容Set、HashSet、TreeSet、LinkedHashSet等）	 */	public Json(java.util.Set<java.lang.String> KeySet, java.util.Set<Object> ValueSet) {		InnerObject = new org.json.JSONObject();		Length = java.lang.Math.min(KeySet.size(), ValueSet.size());		java.util.Iterator<java.lang.String> Key = KeySet.iterator();		java.util.Iterator<Object> Value = ValueSet.iterator();		while (Key.hasNext() && Value.hasNext()) {			Object temp = Value.next();			try {				if (temp instanceof Json) {					if (((Json) temp).InnerObject != null) {						InnerObject.put(Key.next(), new org.json.JSONObject(((Json) temp).InnerObject.toString()));					}					else if (((Json) temp).InnerArray != null) {						InnerObject.put(Key.next(), new org.json.JSONArray(((Json) temp).InnerArray.toString()));					}					else {						InnerObject.put(Key.next(), new org.json.JSONObject("{}"));					}				}				else {					if (temp instanceof org.json.JSONObject) {						temp = new org.json.JSONObject(((org.json.JSONObject) temp).toString());					}					if (temp instanceof org.json.JSONArray) {						temp = new org.json.JSONArray(((org.json.JSONArray) temp).toString());					}					if (temp instanceof Double && (Double.isInfinite((Double) temp) || Double.isNaN((Double) temp))) {						continue;					}					InnerObject.put(Key.next(), temp);				}			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		Length = InnerObject.length();	}	/**	 * 复制JSON对象，返回与原JSON的值相等的新JSON对象<br/>	 * <b>注意：</b><br/>	 * 返回的是新创建的JSON对象（将JSON转换为java.lang.String和解析java.lang.String为新的JSON），新JSON和原JSON不会有任何引用的关联<br/>	 * 代码：return new Json(this);<br/>	 * 	 * @return 新创建的JSON对象	 */	public Json Clone() {		return new Json(this);	}	/**	 * 转换JSON对象，强制将JSON设置为数组格式（键值对格式的信息会丢失）<br/>	 * 	 * @return 当前JSON对象的this引用（可以递归调用）	 */	public Json ConvertToJsonArray() {		if (InnerArray == null) {			InnerArray = new org.json.JSONArray();		}		InnerObject = null;		Length = InnerArray.length();		return this;	}	/**	 * 转换JSON对象，强制将JSON设置为键值对格式（数组格式的信息会丢失）<br/>	 * 	 * @return 当前JSON对象的this引用（可以递归调用）	 */	public Json ConvertToJsonObject() {		if (InnerObject == null) {			InnerObject = new org.json.JSONObject();		}		InnerArray = null;		Length = InnerObject.length();		return this;	}	/**	 * 转换JSON对象，将JSON以键值对格式转换为数组格式（数组格式的信息会丢失，键值对格式的信息会保存在数组的index处）<br/>	 * 	 * @param index	 *            要保存的JSON对象的数组索引	 * @return 当前JSON对象的this引用（可以递归调用）	 */	public Json TransferToJsonArray(int index) {		if (InnerArray == null) {			InnerArray = new org.json.JSONArray();		}		if (InnerObject == null) {			InnerObject = new org.json.JSONObject();		}		try {			InnerArray.put(index, new org.json.JSONObject(this.InnerObject.toString()));		}		catch (org.json.JSONException e) {			e.printStackTrace();		}		InnerObject = null;		Length = InnerArray.length();		return this;	}	/**	 * 转换JSON对象，将JSON以数组格式转换为键值对格式（键值对格式的信息会丢失，数组格式的信息会保存在index键对应处）<br/>	 * 	 * @param index	 *            要保存的JSON对象对应的键	 * @return 当前JSON对象的this引用（可以递归调用）	 */	public Json TransferToJsonObject(java.lang.String index) {		if (InnerArray == null) {			InnerArray = new org.json.JSONArray();		}		if (InnerObject == null) {			InnerObject = new org.json.JSONObject();		}		try {			InnerObject.put(index, new org.json.JSONArray(this.InnerArray.toString()));		}		catch (org.json.JSONException e) {			e.printStackTrace();		}		InnerArray = null;		Length = InnerObject.length();		return this;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的JSON对象的引用<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 返回的是index处的JSON对象的引用，如果对返回的JSON进行修改，原先的JSON也会被修改<br/>	 * 如果index处没有对应的JSON对象，则在index处创建新的空JSON对象，并返回引用<br/>	 * 	 * @param index	 *            要获取的JSON对象的数组索引	 * @return 数组的index处的JSON对象的引用（可递归调用，不会有空指针异常）	 */	public Json Get(int index) {		ConvertToJsonArray();		Json temp = new Json();		temp.InnerObject = this.InnerArray.optJSONObject(index);		temp.InnerArray = this.InnerArray.optJSONArray(index);		if (temp.InnerObject != null) {			temp.Length = temp.InnerObject.length();		}		else if (temp.InnerArray != null) {			temp.Length = temp.InnerArray.length();		}		else {			try {				this.InnerArray.put(index, temp);			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的JSON对象的引用<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 返回的是index键对应的JSON对象的引用，如果对返回的JSON进行修改，原先的JSON也会被修改<br/>	 * 如果index键没有对应的JSON对象，则在index键对应处创建新的空JSON对象，并返回引用<br/>	 * 	 * @param index	 *            要获取的JSON对象对应的键	 * @return index键对应的JSON对象的引用（可递归调用，不会有空指针异常）	 */	public Json Get(java.lang.String index) {		ConvertToJsonObject();		Json temp = new Json();		temp.InnerObject = this.InnerObject.optJSONObject(index);		temp.InnerArray = this.InnerObject.optJSONArray(index);		if (temp.InnerObject != null) {			temp.Length = temp.InnerObject.length();		}		else if (temp.InnerArray != null) {			temp.Length = temp.InnerArray.length();		}		else {			try {				this.InnerObject.put(index, temp);			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的JSON对象的值（拷贝）<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 返回的是index处的JSON对象的值（将JSON转换为java.lang.String和解析java.lang.String为新的JSON），返回的JSON和原JSON不会有任何引用的关联<br/>	 * 如果index处没有对应的JSON对象，则返回一个新创建的空JSON<br/>	 * 	 * @param index	 *            要获取的JSON对象的数组索引	 * @return 数组的index处的JSON对象的值（可递归调用，不会有空指针异常）	 */	public Json GetJson(int index) {		ConvertToJsonArray();		Json temp = new Json();		temp.InnerObject = this.InnerArray.optJSONObject(index);		temp.InnerArray = this.InnerArray.optJSONArray(index);		return new Json(temp.JsonString());	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的JSON对象的值（拷贝）<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 返回的是index键对应的JSON对象的值（将JSON转换为java.lang.String和解析java.lang.String为新的JSON），返回的JSON和原JSON不会有任何引用的关联<br/>	 * 如果index键没有对应的JSON对象，则返回一个新创建的空JSON<br/>	 * 	 * @param index	 *            要获取的JSON对象对应的键	 * @return index键对应的JSON对象的值（可递归调用，不会有空指针异常）	 */	public Json GetJson(java.lang.String index) {		ConvertToJsonObject();		Json temp = new Json();		temp.InnerObject = this.InnerObject.optJSONObject(index);		temp.InnerArray = this.InnerObject.optJSONArray(index);		return new Json(temp.JsonString());	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的JSONObject对象的值（拷贝）<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 返回的是index处的JSON对象的值（将JSON转换为java.lang.String和解析java.lang.String为新的JSON），返回的JSON和原JSON不会有任何引用的关联<br/>	 * 如果index处没有对应的JSON对象，则返回一个新创建的空JSON<br/>	 * 	 * @param index	 *            要获取的JSONObject对象的数组索引	 * @return 数组的index处的JSONObject对象的值	 */	public org.json.JSONObject GetJsonObject(int index) {		ConvertToJsonArray();		org.json.JSONObject temp = this.InnerArray.optJSONObject(index);		return temp != null ? temp : new org.json.JSONObject();	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的JSONObject对象的值（拷贝）<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 返回的是index键对应的JSON对象的值（将JSON转换为java.lang.String和解析java.lang.String为新的JSON），返回的JSON和原JSON不会有任何引用的关联<br/>	 * 如果index键没有对应的JSON对象，则返回一个新创建的空JSON<br/>	 * 	 * @param index	 *            要获取的JSONObject对象对应的键	 * @return index键对应的JSONObject对象的值	 */	public org.json.JSONObject GetJsonObject(java.lang.String index) {		ConvertToJsonObject();		org.json.JSONObject temp = this.InnerObject.optJSONObject(index);		return temp != null ? temp : new org.json.JSONObject();	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的JSONArray对象的值（拷贝）<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 返回的是index处的JSON对象的值（将JSON转换为java.lang.String和解析java.lang.String为新的JSON），返回的JSON和原JSON不会有任何引用的关联<br/>	 * 如果index处没有对应的JSON对象，则返回一个新创建的空JSON<br/>	 * 	 * @param index	 *            要获取的JSONArray对象的数组索引	 * @return 数组的index处的JSONArray对象的值	 */	public org.json.JSONArray GetJsonArray(int index) {		ConvertToJsonArray();		org.json.JSONArray temp = this.InnerArray.optJSONArray(index);		return temp != null ? temp : new org.json.JSONArray();	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的JSONArray对象的值（拷贝）<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 返回的是index键对应的JSON对象的值（将JSON转换为java.lang.String和解析java.lang.String为新的JSON），返回的JSON和原JSON不会有任何引用的关联<br/>	 * 如果index键没有对应的JSON对象，则返回一个新创建的空JSON<br/>	 * 	 * @param index	 *            要获取的JSONArray对象对应的键	 * @return index键对应的JSONArray对象的值	 */	public org.json.JSONArray GetJsonArray(java.lang.String index) {		ConvertToJsonObject();		org.json.JSONArray temp = this.InnerObject.optJSONArray(index);		return temp != null ? temp : new org.json.JSONArray();	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Integer值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Integer，则返回0<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public int GetInt(int index) {		ConvertToJsonArray();		return InnerArray.optInt(index);	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Integer值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Integer，则返回0<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public int GetInt(java.lang.String index) {		ConvertToJsonObject();		return InnerObject.optInt(index);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的java.lang.String值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值或值为null，则返回空字符串""<br/>	 * 如果数组的index处为org.json.JSONObject.NULL，则返回字符串"null"<br/>	 * 如果数组的index处为org.json.JSONObject或org.json.JSONArray，则返回对应的JSON字符串<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public java.lang.String GetString(int index) {		ConvertToJsonArray();		return InnerArray.optString(index);	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的java.lang.String值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值或值为null，则返回空字符串""<br/>	 * 如果index键对应处为org.json.JSONObject.NULL，则返回字符串"null"<br/>	 * 如果index键对应处为org.json.JSONObject或org.json.JSONArray，则返回对应的JSON字符串<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public java.lang.String GetString(java.lang.String index) {		ConvertToJsonObject();		return InnerObject.optString(index);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Boolean值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Boolean，则返回false<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public boolean GetBoolean(int index) {		ConvertToJsonArray();		return InnerArray.optBoolean(index);	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Boolean值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Boolean，则返回false<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public boolean GetBoolean(java.lang.String index) {		ConvertToJsonObject();		return InnerObject.optBoolean(index);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Long值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Long，则返回0<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public long GetLong(int index) {		ConvertToJsonArray();		return InnerArray.optLong(index);	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Long值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Long，则返回0<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public long GetLong(java.lang.String index) {		ConvertToJsonObject();		return InnerObject.optLong(index);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Double值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Double，则返回0<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public double GetDouble(int index) {		ConvertToJsonArray();		return Double.isNaN(InnerArray.optDouble(index)) ? 0 : InnerArray.optDouble(index);	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Double值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Double，则返回0<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public double GetDouble(java.lang.String index) {		ConvertToJsonObject();		return Double.isNaN(InnerObject.optDouble(index)) ? 0 : InnerObject.optDouble(index);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Object值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值为org.json.JSONObject.NULL，则返回null<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public Object GetObject(int index) {		ConvertToJsonArray();		return InnerArray.opt(index) == org.json.JSONObject.NULL ? null : InnerArray.opt(index);	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Object值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值为org.json.JSONObject.NULL，则返回null<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @return 尝试获取到的值	 */	public Object GetObject(java.lang.String index) {		ConvertToJsonObject();		return InnerObject.opt(index) == org.json.JSONObject.NULL ? null : InnerObject.opt(index);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），判断数组的index处是否有Integer值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Integer，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Integer值	 */	public boolean HasInt(int index) {		ConvertToJsonArray();		try {			InnerArray.getInt(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），判断index键处是否有Integer值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Integer，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Integer值	 */	public boolean HasInt(java.lang.String index) {		ConvertToJsonObject();		try {			InnerObject.getInt(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），判断数组的index处是否有java.lang.String值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值或值为null，则返回false<br/>	 * 如果数组的index处为org.json.JSONObject.NULL，对应字符串"null"，返回true<br/>	 * 如果数组的index处为org.json.JSONObject或org.json.JSONArray，对应JSON字符串，返回true<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有java.lang.String值	 */	public boolean HasString(int index) {		ConvertToJsonArray();		try {			InnerArray.getString(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），判断index键处是否有java.lang.String值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值或值为null，则返回false<br/>	 * 如果index键对应处为org.json.JSONObject.NULL，对应字符串"null"，返回true<br/>	 * 如果index键对应处为org.json.JSONObject或org.json.JSONArray，对应JSON字符串，返回true<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有java.lang.String值	 */	public boolean HasString(java.lang.String index) {		ConvertToJsonObject();		try {			InnerObject.getString(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），判断数组的index处是否有Boolean值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Boolean，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Boolean值	 */	public boolean HasBoolean(int index) {		ConvertToJsonArray();		try {			InnerArray.getBoolean(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），判断index键处是否有Boolean值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Boolean，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Boolean值	 */	public boolean HasBoolean(java.lang.String index) {		ConvertToJsonObject();		try {			InnerObject.getBoolean(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），判断数组的index处是否有Long值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Long，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Long值	 */	public boolean HasLong(int index) {		ConvertToJsonArray();		try {			InnerArray.getLong(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），判断index键处是否有Long值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Long，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Long值	 */	public boolean HasLong(java.lang.String index) {		ConvertToJsonObject();		try {			InnerObject.getLong(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），判断数组的index处是否有Double值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Double，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Double值	 */	public boolean HasDouble(int index) {		ConvertToJsonArray();		try {			InnerArray.getDouble(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），判断index键处是否有Double值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Double，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Double值	 */	public boolean HasDouble(java.lang.String index) {		ConvertToJsonObject();		try {			InnerObject.getDouble(index);		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），判断数组的index处是否有Object值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值为null或org.json.JSONObject.NULL，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Object值	 */	public boolean HasNotNullObject(int index) {		ConvertToJsonArray();		try {			if (InnerArray.get(index) == org.json.JSONObject.NULL) {				return false;			}		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），判断index键处是否有Object值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值为null或org.json.JSONObject.NULL，则返回false<br/>	 * 	 * @param index	 *            尝试判断的值的索引	 * @return 是否有Object值	 */	public boolean HasNotNullObject(java.lang.String index) {		ConvertToJsonObject();		try {			if (InnerObject.get(index) == null || InnerObject.get(index) == org.json.JSONObject.NULL) {				return false;			}		}		catch (org.json.JSONException e) {			return false;		}		return true;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Integer值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Integer，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public int GetInt(int index, int defaultValue) {		ConvertToJsonArray();		try {			return InnerArray.getInt(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Integer值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Integer，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public int GetInt(java.lang.String index, int defaultValue) {		ConvertToJsonObject();		try {			return InnerObject.getInt(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的java.lang.String值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值或值为null，则返回defaultValue<br/>	 * 如果数组的index处为org.json.JSONObject.NULL，则返回字符串"null"<br/>	 * 如果数组的index处为org.json.JSONObject或org.json.JSONArray，则返回对应的JSON字符串<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public java.lang.String GetString(int index, java.lang.String defaultValue) {		ConvertToJsonArray();		try {			return InnerArray.getString(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的java.lang.String值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值或值为null，则返回defaultValue<br/>	 * 如果index键对应处为org.json.JSONObject.NULL，则返回字符串"null"<br/>	 * 如果index键对应处为org.json.JSONObject或org.json.JSONArray，则返回对应的JSON字符串<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public java.lang.String GetString(java.lang.String index, java.lang.String defaultValue) {		ConvertToJsonObject();		try {			return InnerObject.getString(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Boolean值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Boolean，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public boolean GetBoolean(int index, boolean defaultValue) {		ConvertToJsonArray();		try {			return InnerArray.getBoolean(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Boolean值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Boolean，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public boolean GetBoolean(java.lang.String index, boolean defaultValue) {		ConvertToJsonObject();		try {			return InnerObject.getBoolean(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Long值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Long，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public long GetLong(int index, long defaultValue) {		ConvertToJsonArray();		try {			return InnerArray.getLong(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Long值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Long，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public long GetLong(java.lang.String index, long defaultValue) {		ConvertToJsonObject();		try {			return InnerObject.getLong(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Double值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值不能转换为Double，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public double GetDouble(int index, double defaultValue) {		ConvertToJsonArray();		try {			return InnerArray.getDouble(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Double值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值不能转换为Double，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public double GetDouble(java.lang.String index, double defaultValue) {		ConvertToJsonObject();		try {			return InnerObject.getDouble(index);		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），返回数组的index处的Object值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果数组的index处不存在值，或者值为null或org.json.JSONObject.NULL，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public Object GetObject(int index, Object defaultValue) {		ConvertToJsonArray();		try {			if (InnerArray.get(index) == org.json.JSONObject.NULL) {				return defaultValue;			}			else {				return InnerArray.get(index);			}		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），返回index键对应的Object值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果index键对应处不存在值，或者值为null或org.json.JSONObject.NULL，则返回defaultValue<br/>	 * 	 * @param index	 *            尝试获取的值的索引	 * @param defaultValue	 *            获取失败时返回的默认值	 * @return 尝试获取到的值	 */	public Object GetObject(java.lang.String index, Object defaultValue) {		ConvertToJsonObject();		try {			if (InnerObject.get(index) == null || InnerObject.get(index) == org.json.JSONObject.NULL) {				return defaultValue;			}			else {				return InnerObject.get(index);			}		}		catch (org.json.JSONException e) {			return defaultValue;		}	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(int index, int value) {		this.ConvertToJsonArray();		try {			InnerArray.put(index, value);			Length = InnerArray.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, int value) {		this.ConvertToJsonObject();		try {			InnerObject.put(index, value);			Length = InnerObject.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(int index, java.lang.String value) {		this.ConvertToJsonArray();		try {			InnerArray.put(index, value);			Length = InnerArray.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, java.lang.String value) {		this.ConvertToJsonObject();		try {			InnerObject.put(index, value);			Length = InnerObject.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(int index, boolean value) {		this.ConvertToJsonArray();		try {			InnerArray.put(index, value);			Length = InnerArray.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, boolean value) {		this.ConvertToJsonObject();		try {			InnerObject.put(index, value);			Length = InnerObject.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(int index, long value) {		this.ConvertToJsonArray();		try {			InnerArray.put(index, value);			Length = InnerArray.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, long value) {		this.ConvertToJsonObject();		try {			InnerObject.put(index, value);			Length = InnerObject.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果value的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能设定到JSON中，返回false<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(int index, double value) {		this.ConvertToJsonArray();		if (Double.isNaN(value) || Double.isInfinite(value)) {			return false;		}		try {			InnerArray.put(index, value);			Length = InnerArray.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 如果value的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能设定到JSON中，返回false<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, double value) {		this.ConvertToJsonObject();		if (Double.isNaN(value) || Double.isInfinite(value)) {			return false;		}		try {			InnerObject.put(index, value);			Length = InnerObject.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为JsonInstance<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * 设定过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为null值<br/>	 * 	 * @param index	 *            位置	 * @param JsonInstance	 *            JSON数据	 * @return 是否设定成功	 */	public boolean Put(int index, Json JsonInstance) {		if (JsonInstance == null) {			return Put(index, org.json.JSONObject.NULL);		}		this.ConvertToJsonArray();		java.lang.String jsonString = JsonInstance.JsonString();		try {			if (JsonInstance.InnerObject != null) {				InnerArray.put(index, new org.json.JSONObject(jsonString));			}			else if (JsonInstance.InnerArray != null) {				InnerArray.put(index, new org.json.JSONArray(jsonString));			}			else {				InnerArray.put(new org.json.JSONObject("{}"));			}		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		Length = InnerArray.length();		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为JsonInstance<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 设定过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为org.json.JSONObject.NULL<br/>	 * 	 * @param index	 *            位置	 * @param JsonInstance	 *            JSON数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, Json JsonInstance) {		if (JsonInstance == null) {			return Put(index, org.json.JSONObject.NULL);		}		this.ConvertToJsonObject();		java.lang.String jsonString = JsonInstance.JsonString();		try {			if (JsonInstance.InnerObject != null) {				InnerObject.put(index, new org.json.JSONObject(jsonString));			}			else if (JsonInstance.InnerArray != null) {				InnerObject.put(index, new org.json.JSONArray(jsonString));			}			else {				InnerArray.put(new org.json.JSONObject("{}"));			}		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		Length = InnerObject.length();		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为JsonInstance<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * 设定过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为null值<br/>	 * 	 * @param index	 *            位置	 * @param JsonInstance	 *            JSON数据	 * @return 是否设定成功	 */	public boolean Put(int index, org.json.JSONObject JsonInstance) {		if (JsonInstance == null) {			return Put(index, org.json.JSONObject.NULL);		}		this.ConvertToJsonArray();		java.lang.String jsonString = JsonInstance.toString();		try {			InnerArray.put(index, new org.json.JSONObject(jsonString));		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		Length = InnerArray.length();		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为JsonInstance<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 设定过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为org.json.JSONObject.NULL<br/>	 * 	 * @param index	 *            位置	 * @param JsonInstance	 *            JSON数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, org.json.JSONObject JsonInstance) {		if (JsonInstance == null) {			return Put(index, org.json.JSONObject.NULL);		}		this.ConvertToJsonObject();		java.lang.String jsonString = JsonInstance.toString();		try {			InnerObject.put(index, new org.json.JSONObject(jsonString));		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		Length = InnerObject.length();		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为JsonInstance<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * 设定过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为null值<br/>	 * 	 * @param index	 *            位置	 * @param JsonInstance	 *            JSON数据	 * @return 是否设定成功	 */	public boolean Put(int index, org.json.JSONArray JsonInstance) {		if (JsonInstance == null) {			return Put(index, org.json.JSONObject.NULL);		}		this.ConvertToJsonArray();		java.lang.String jsonString = JsonInstance.toString();		try {			InnerArray.put(index, new org.json.JSONArray(jsonString));		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		Length = InnerArray.length();		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为JsonInstance<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 设定过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为org.json.JSONObject.NULL<br/>	 * 	 * @param index	 *            位置	 * @param JsonInstance	 *            JSON数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, org.json.JSONArray JsonInstance) {		if (JsonInstance == null) {			return Put(index, org.json.JSONObject.NULL);		}		this.ConvertToJsonObject();		java.lang.String jsonString = JsonInstance.toString();		try {			InnerObject.put(index, new org.json.JSONArray(jsonString));		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		Length = InnerObject.length();		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果index>Length，则跳过的未赋值的位置的数据为JAVA的null值，用GetString(index)获取，为字符串"null"，用GetObject(index)获取，为JAVA的null值，将JSON转换为字符串后类似于：["123",null,null,null,"123"]<br/>	 * Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * 如果value的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能设定到JSON中，返回false<br/>	 * 如果value为null值，则实际Put进去的数据为null值<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(int index, Object value) {		if (value instanceof Json) {			return Put(index, (Json) value);		}		if (value instanceof org.json.JSONObject) {			return Put(index, (org.json.JSONObject) value);		}		if (value instanceof org.json.JSONArray) {			return Put(index, (org.json.JSONArray) value);		}		if (value instanceof Double) {			return Put(index, (double) ((Double) value));		}		this.ConvertToJsonArray();		try {			InnerArray.put(index, value);			Length = InnerArray.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），将index处的值设定为value<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * 如果value的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能设定到JSON中，返回false<br/>	 * 如果value为null值，则实际Put进去的数据为org.json.JSONObject.NULL<br/>	 * 	 * @param index	 *            位置	 * @param value	 *            数据	 * @return 是否设定成功	 */	public boolean Put(java.lang.String index, Object value) {		if (value == null) {			return Put(index, org.json.JSONObject.NULL);		}		if (value instanceof Json) {			return Put(index, (Json) value);		}		if (value instanceof org.json.JSONObject) {			return Put(index, (org.json.JSONObject) value);		}		if (value instanceof org.json.JSONArray) {			return Put(index, (org.json.JSONArray) value);		}		if (value instanceof Double) {			return Put(index, (double) ((Double) value));		}		this.ConvertToJsonObject();		try {			InnerObject.put(index, value);			Length = InnerObject.length();		}		catch (org.json.JSONException e) {			e.printStackTrace();			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），删除index处的值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 在删除index处的值后，会将数组末尾的无意义的null或org.json.JSONObject.NULL清空	 * 	 * @param index	 *            位置	 * @return 数组长度是否被改变	 */	public boolean Remove(int index) {		InnerObject = null;		if (InnerArray == null) {			InnerArray = new org.json.JSONArray();			Length = 0;			return false;		}		org.json.JSONArray temp = new org.json.JSONArray();		try {			temp = new org.json.JSONArray(InnerArray.toString());		}		catch (org.json.JSONException e) {			e.printStackTrace();		}		InnerArray = new org.json.JSONArray();		boolean SkipNull = true;		try {			for (int i = temp.length() - 1; i >= 0 && i != index; i--) {				if (SkipNull && temp.get(i) != null && temp.get(i) != org.json.JSONObject.NULL) {					SkipNull = false;				}				if (SkipNull == false) {					InnerArray.put(temp.get(i));				}			}		}		catch (org.json.JSONException e) {			e.printStackTrace();		}		Length = InnerArray.length();		if (temp.length() == Length) {			return false;		}		return true;	}	/**	 * 修改JSON对象（需要JSON对象是键值对格式），删除index处的值<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 	 * @param index	 *            位置	 * @return index处的值是否被删除	 */	public boolean Remove(java.lang.String index) {		this.ConvertToJsonObject();		if (InnerObject.remove(index) == null) {			return false;		}		Length = InnerObject.length();		return true;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将value添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 	 * @param value	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(int value) {		this.ConvertToJsonArray();		InnerArray.put(value);		Length = InnerArray.length();		return this;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将value添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 	 * @param value	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(java.lang.String value) {		this.ConvertToJsonArray();		InnerArray.put(value);		Length = InnerArray.length();		return this;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将value添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 	 * @param value	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(boolean value) {		this.ConvertToJsonArray();		InnerArray.put(value);		Length = InnerArray.length();		return this;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将value添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 	 * @param value	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(long value) {		this.ConvertToJsonArray();		InnerArray.put(value);		Length = InnerArray.length();		return this;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将value添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果value的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能添加到JSON中<br/>	 * 	 * @param value	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(double value) {		this.ConvertToJsonArray();		if (Double.isNaN(value) || Double.isInfinite(value)) {			return this;		}		try {			InnerArray.put(value);		}		catch (org.json.JSONException e) {			e.printStackTrace();		}		Length = InnerArray.length();		return this;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将JsonInstance添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 添加过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为null值<br/>	 * 	 * @param JsonInstance	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(Json JsonInstance) {		if (JsonInstance == null) {			return Add((Object) null);		}		this.ConvertToJsonArray();		java.lang.String jsonString = JsonInstance.JsonString();		try {			if (JsonInstance.InnerObject != null) {				InnerArray.put(new org.json.JSONObject(jsonString));			}			else if (JsonInstance.InnerArray != null) {				InnerArray.put(new org.json.JSONArray(jsonString));			}			else {				InnerArray.put(new org.json.JSONObject("{}"));			}		}		catch (org.json.JSONException e) {			e.printStackTrace();		}		Length = InnerArray.length();		return this;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将JsonInstance添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 添加过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为null值<br/>	 * 	 * @param JsonInstance	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(org.json.JSONObject JsonInstance) {		if (JsonInstance == null) {			return Add((Object) null);		}		this.ConvertToJsonArray();		java.lang.String jsonString = JsonInstance.toString();		try {			InnerArray.put(new org.json.JSONObject(jsonString));		}		catch (org.json.JSONException e) {			e.printStackTrace();		}		Length = InnerArray.length();		return this;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将JsonInstance添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 添加过程实际上是将JSON转换为java.lang.String和解析java.lang.String为JSON，新的JSON和JsonInstance不会有任何引用的关联<br/>	 * 如果JsonInstance为null值，则实际Put进去的数据为null值<br/>	 * 	 * @param JsonInstance	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(org.json.JSONArray JsonInstance) {		if (JsonInstance == null) {			return Add((Object) null);		}		this.ConvertToJsonArray();		java.lang.String jsonString = JsonInstance.toString();		try {			InnerArray.put(new org.json.JSONArray(jsonString));		}		catch (org.json.JSONException e) {			e.printStackTrace();		}		Length = InnerArray.length();		return this;	}	/**	 * 修改JSON对象（需要JSON对象是数组格式），将value添加到数组末尾<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * Object的类型必须为JSON, JSONObject, JSONArray, java.lang.String, Boolean, Integer, Long, Double, JSONObject.NULL, null中的某一种<br/>	 * 如果value的值为Double.NaN或Double.NEGATIVE_INFINITY或Double.POSITIVE_INFINITY，则不能添加到JSON中<br/>	 * 如果value为null值，则实际Put进去的数据为null值<br/>	 * 	 * @param value	 *            要添加的值	 * @return 当前JSON的this引用（可递归调用）	 */	public Json Add(Object value) {		if (value instanceof Json) {			return Add((Json) value);		}		if (value instanceof org.json.JSONObject) {			return Add((org.json.JSONObject) value);		}		if (value instanceof org.json.JSONArray) {			return Add((org.json.JSONArray) value);		}		if (value instanceof Double) {			return Add((double) ((Double) value));		}		this.ConvertToJsonArray();		InnerArray.put(value);		Length = InnerArray.length();		return this;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），分离出所有键（字符串），返回包含了所有键（字符串）的JSON<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 返回的新JSON和原JSON不会有任何引用的关联<br/>	 * 	 * @return 新建的一个数组格式的JSON	 */	public Json SeparateKeysJson() {		ConvertToJsonObject();		Json temp = new Json();		temp.InnerArray = InnerObject.names();		temp.ConvertToJsonArray();		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是键值对格式），分离出所有值（Object），返回包含了所有值（Object）的JSON<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是键值对格式，则将其强制修改为键值对格式，此时数组格式的信息会丢失<br/>	 * 返回的新JSON和原JSON不会有任何引用的关联<br/>	 * 	 * @return 新建的一个数组格式的JSON	 */	public Json SeparateValuesJson() {		ConvertToJsonObject();		Json temp = new Json();		org.json.JSONArray tempArray = InnerObject.names();		if (tempArray != null) {			for (int i = 0; i < tempArray.length(); i++) {				try {					temp.Put(i, InnerObject.get((java.lang.String) tempArray.get(i)));				}				catch (org.json.JSONException e) {					e.printStackTrace();				}			}		}		temp.ConvertToJsonArray();		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Integer元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Integer类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Integer元素的List	 */	public java.util.List<Integer> GetIntList() {		ConvertToJsonArray();		java.util.List<Integer> temp = new java.util.ArrayList<Integer>();		for (int i = 0; i < Length; i++) {			try {				temp.add(InnerArray.getInt(i));			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Integer元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Integer类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Integer元素的Array	 */	public Integer[] GetIntArray() {		return GetIntList().toArray(new Integer[0]);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Integer元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Integer类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Integer元素的Set	 */	public java.util.Set<Integer> GetIntSet() {		return new java.util.HashSet<Integer>(GetIntList());	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的java.lang.String元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 除了null值之外的所有类型都可以被转换为java.lang.String类型，都会被获取到<br/>	 * 	 * @return 包含数组里所有的java.lang.String元素的List	 */	public java.util.List<java.lang.String> GetStringList() {		ConvertToJsonArray();		java.util.List<java.lang.String> temp = new java.util.ArrayList<java.lang.String>();		for (int i = 0; i < Length; i++) {			try {				temp.add(InnerArray.getString(i));			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的java.lang.String元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 除了null值之外的所有类型都可以被转换为java.lang.String类型，都会被获取到<br/>	 * 	 * @return 包含数组里所有的java.lang.String元素的Array	 */	public java.lang.String[] GetStringArray() {		return GetStringList().toArray(new java.lang.String[0]);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的java.lang.String元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 除了null值之外的所有类型都可以被转换为java.lang.String类型，都会被获取到<br/>	 * 	 * @return 包含数组里所有的java.lang.String元素的Set	 */	public java.util.Set<java.lang.String> GetStringSet() {		return new java.util.HashSet<java.lang.String>(GetStringList());	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Boolean元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Boolean类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Boolean元素的List	 */	public java.util.List<Boolean> GetBooleanList() {		ConvertToJsonArray();		java.util.List<Boolean> temp = new java.util.ArrayList<Boolean>();		for (int i = 0; i < Length; i++) {			try {				temp.add(InnerArray.getBoolean(i));			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Boolean元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Boolean类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Boolean元素的Array	 */	public Boolean[] GetBooleanArray() {		return GetBooleanList().toArray(new Boolean[0]);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Boolean元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Boolean类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Boolean元素的Set	 */	public java.util.Set<Boolean> GetBooleanSet() {		return new java.util.HashSet<Boolean>(GetBooleanList());	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Long元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Long类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Long元素的List	 */	public java.util.List<Long> GetLongList() {		ConvertToJsonArray();		java.util.List<Long> temp = new java.util.ArrayList<Long>();		for (int i = 0; i < Length; i++) {			try {				temp.add(InnerArray.getLong(i));			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Long元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Long类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Long元素的Array	 */	public Long[] GetLongArray() {		return GetLongList().toArray(new Long[0]);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Long元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Long类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Long元素的Set	 */	public java.util.Set<Long> GetLongSet() {		return new java.util.HashSet<Long>(GetLongList());	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Double元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Double类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Double元素的List	 */	public java.util.List<Double> GetDoubleList() {		ConvertToJsonArray();		java.util.List<Double> temp = new java.util.ArrayList<Double>();		for (int i = 0; i < Length; i++) {			try {				temp.add(InnerArray.getDouble(i));			}			catch (org.json.JSONException e) {				e.printStackTrace();			}		}		return temp;	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Double元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Double类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Double元素的Array	 */	public Double[] GetDoubleArray() {		return GetDoubleList().toArray(new Double[0]);	}	/**	 * 解析JSON对象（需要JSON对象是数组格式），获取数组里所有的Double元素<br/>	 * <b>注意：</b><br/>	 * 如果JSON对象不是数组格式，则将其强制修改为数组格式，此时键值对格式的信息会丢失<br/>	 * 如果元素可以被转换为Double类型，则也会被获取到<br/>	 * 	 * @return 包含数组里所有的Double元素的Set	 */	public java.util.Set<Double> GetDoubleSet() {		return new java.util.HashSet<Double>(GetDoubleList());	}	/**	 * 判断JSON是否为有效的Json（通常用于验证构造函数是否构造成功）<br/>	 * <b>注意：</b><br/>	 * 使用new Json()创建的空JSON认为不是有效的Json格式，返回false<br/>	 * 内部实现：return InnerArray != null || InnerObject != null<br/>	 * 	 * @return JSON是否为有效的Json	 */	public boolean IsValidJson() {		return InnerArray != null || InnerObject != null;	}	/**	 * 判断JSON的类型<br/>	 * <b>注意：</b><br/>	 * 使用new Json()创建的空JSON认为不是数组格式，返回false<br/>	 * 	 * @return JSON是否是数组格式	 */	public boolean IsJsonArray() {		return InnerArray != null;	}	/**	 * 判断JSON的类型<br/>	 * <b>注意：</b><br/>	 * 使用new Json()创建的空JSON认为不是键值对格式，返回false<br/>	 * 	 * @return JSON是否是键值对格式	 * 	 */	public boolean IsJsonObject() {		return InnerObject != null;	}	/**	 * 判断JSON的类型<br/>	 * <b>注意：</b><br/>	 * 使用new Json()创建的空JSON认为不是数组格式，返回true<br/>	 * 	 * @return JSON是否不是数组格式	 */	public boolean IsNotJsonArray() {		return InnerArray == null;	}	/**	 * 判断JSON的类型<br/>	 * <b>注意：</b><br/>	 * 使用new Json()创建的空JSON认为不是键值对格式，返回true<br/>	 * 	 * @return JSON是否不是键值对格式	 */	public boolean IsNotJsonObject() {		return InnerObject == null;	}	/**	 * 转换JSON为JSON格式的字符串<br/>	 * <b>注意：</b><br/>	 * 使用new Json()创建的空JSON，转换后的字符串值为{}，2字节<br/>	 * new org.json.JSONObject()对象，转换后的字符串值为{}，2字节<br/>	 * new org.json.JSONArray()对象，转换后的字符串值为[]，2字节<br/>	 * 	 * @return JSON字符串	 */	public java.lang.String JsonString() {		java.lang.String temp = "{}";		if (InnerObject != null) {			temp = InnerObject.toString();		}		else if (InnerArray != null) {			temp = InnerArray.toString();		}		return temp;	}	/**	 * 转换JSON为JSON格式的字符串（同JsonString()）<br/>	 * 	 * @deprecated 建议使用JsonString()函数<br/>	 * @see #JsonString()	 * @return JSON字符串	 */	public java.lang.String ToJsonString() {		return JsonString();	}}